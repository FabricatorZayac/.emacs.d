#+TITLE: Emacs config
#+STARTUP: overview

* All the icons
#+begin_src elisp
(use-package all-the-icons
  :ensure t)
#+end_src

* EVIL-mode
** EVIL itself
#+begin_src elisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil
	evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  (evil-global-set-key 'normal (kbd ";") 'evil-ex)
  (evil-define-key 'normal elpy-mode-map (kbd "C-<f1>") 'elpy-goto-definition))
#+end_src

** evil-collection so I can use vim keys in magit
#+begin_src elisp
(use-package evil-collection
  :after evil magit
  :ensure t
  :config
  (evil-collection-init))
#+end_src

** evil-commentary is my must-have tpope plugin
#+begin_src elisp
(use-package evil-commentary
  :after evil
  :ensure t
  :hook (prog-mode . evil-commentary-mode))
#+end_src

** undo-tree-mode
#+begin_src elisp
(use-package undo-tree
  :after evil
  :ensure t
  :config
  (global-undo-tree-mode))
#+end_src

** evil-goggles
#+begin_src elisp
(use-package evil-goggles
  :ensure t
  :config
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces))
#+end_src

* Org-mode
** org-tempo
#+begin_src elisp
(use-package org-tempo
  :after org)
  ;; :ensure t)
#+end_src

** org-bullets
#+begin_src elisp
(use-package org-bullets
  :after org
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

** org-mode variables
#+begin_src elisp
(setq org-startup-indented t
  org-ellipsis " ï„‡ " ;; folding symbol
  org-pretty-entities t
  org-hide-emphasis-markers t
  ;; show actually italicized text instead of /italicized text/
  org-agenda-block-separator ""
  org-fontify-whole-heading-line t
  org-fontify-done-headline t
  org-fontify-quote-and-verse-blocks t
  org-edit-src-content-indentation 0)
#+end_src

* Magit
#+begin_src elisp
(use-package magit
  :ensure t)
#+end_src

* Reverse-im
#+begin_src elisp
(use-package reverse-im
  :ensure t
  :custom
  (reverse-im-input-methods '("russian-computer"))
  :config
  (reverse-im-mode t))
#+end_src

* Company mode
** company itself
#+begin_src elisp
(use-package company
  :ensure t
  :hook (prog-mode . global-company-mode))
#+end_src

** Tabnine company backend
#+begin_src elisp
(use-package company-tabnine
  :ensure t
  :config
  (add-to-list 'company-backends #'company-tabnine))

(setq company-idle-delay 0
      company-show-numbers t)
#+end_src

* Quickrun
#+begin_src elisp
(use-package quickrun
  :ensure t
  :bind("<f5>". 'quickrun-shell))
#+end_src

* LSP mode
#+begin_src elisp
(use-package lsp-mode
  :commands lsp
  :ensure t
  :hook(c-mode . lsp))
#+end_src

* Treemacs
** treemacs itself
#+begin_src elisp
(use-package treemacs
  :ensure t)
#+end_src

** treemacs-icons-dired
(for some reason doesn't load properly)
#+begin_src elisp
(use-package treemacs-icons-dired
  :after treemacs dired all-the-icons
  :ensure t
  :config (treemacs-icons-dired-mode))
#+end_src

* LSP-treemacs
#+begin_src elisp
(use-package lsp-treemacs
  :ensure t
  :commands lsp-treemacs-errors-list)
#+end_src

* vterm
#+begin_src elisp
(use-package vterm
  :ensure t)
#+end_src

* Python
#+begin_src elisp
(use-package elpy
  :ensure t
  :hook ((python-mode . elpy-enable)
         (elpy-mode . (lambda () (highlight-indentation-mode -1)))))
#+end_src

* PKGBUILD
#+begin_src elisp
(use-package pkgbuild-mode
  :ensure t)
#+end_src

* which-key
#+begin_src elisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

* Look and feel
** Exit
#+begin_src elisp
(add-hook 'kill-emacs-query-functions
          (lambda () (y-or-n-p "Exit Emacs? "))
          'append)
#+end_src

** Tab bar
#+begin_src elisp
(setq tab-bar-new-tab-choice "*dashboard*")
(tab-bar-mode)
#+end_src

** Brackets
Highlight matching parens
#+begin_src elisp
(show-paren-mode 1)
#+end_src

Automatic pair matching (brackets, parens, etc.)
#+begin_src elisp
(add-hook 'prog-mode-hook
	  #'electric-pair-local-mode)
#+end_src

Rainbow delimeters
#+begin_src elisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Bell
stfu
#+begin_src elisp
(setq visible-bell 1)
#+end_src

** display-line-numbers-mode
Line numbers in prog mode
#+begin_src elisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Colorscheme
#+begin_src elisp
(load-theme 'gruvbox-dark-hard)
#+end_src

** Font
#+begin_src elisp
(set-frame-font "Source code pro 11" nil t)
#+end_src

** Dashboard
#+begin_src elisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)))
  (setq dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-startup-banner "~/.emacs.d/Emacs-logo.svg"
        dashboard-banner-logo-title "Welcome to Emacs!"
        dashboard-set-navigator t
        dashboard-center-content t)
  (setq dashboard-navigator-buttons
        `(((,(all-the-icons-faicon "archive" :height 1.1 :v-adjust 0.0)
            "Update Packages"
            "Click to updates your packages"
            (lambda (&rest _) (auto-package-update-now)))

	   (,(all-the-icons-octicon "gear" :height 1.1 :v-adjust 0.0)
            "Configuration"
            "Click to open config file"
            (lambda (&rest _) (find-file "~/.emacs.d/configuration.org")))))))
#+end_src

** Powerline
Powerline itself
#+begin_src elisp
(use-package powerline
  :ensure t
  :config
  (setq powerline-arrow-shape 'arrow))
#+end_src

Airline theme
#+begin_src elisp
(use-package airline-themes
  :ensure t
  :config
  (load-theme 'airline-gruvbox-dark))
#+end_src

** Highlight indent
#+begin_src elisp
(use-package highlight-indent-guides
  :ensure t
  :hook (prog-mode . highlight-indent-guides-mode))
#+end_src
